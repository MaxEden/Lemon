<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var argtypes = new[]
    {
        "string", "int", "sbyte", "byte", "long", "float", "double", "Instruction", "Instruction[]",
        "VariableDefinition", "ParameterDefinition",
        "TypeReference", "CallSite"
    };
    
    var argtypesWithImport = new[]
    {
        "MethodInfo", "ConstructorInfo", "FieldInfo",
        "FieldReference", "MethodReference"
    };

    var opcodes = new[]
    {        
        "Dup","Pop","Sub",
        "Ret","Add", "Nop"
    };
#>
using System; 
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Cecil.Rocks;
using Mono.Collections.Generic;

namespace Lemon.Tools
{
    public partial class Emitter
    {
<#    foreach (var argtype in argtypes){ #>
        public Emitter Emit(OpCode opcode, <#=argtype#> arg)
        {
            return Emit(Instruction.Create(opcode, arg));
        }
<#    }#>

<#    foreach (var argtype in argtypesWithImport){ #>
        public Emitter Emit(OpCode opcode, <#=argtype#> arg)
        {
            return Emit(Instruction.Create(opcode, MethodDefinition.Module.ImportReference(arg)));
        }
<#    }#>

<#    foreach (var opcode in opcodes){ #>
        public Emitter <#=opcode#>()
        {
            return Emit(OpCodes.<#=opcode#>);
        }
<#    }#>
    }
}